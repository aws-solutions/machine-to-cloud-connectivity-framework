// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`M2C2 UI test 1`] = `
Object {
  "Resources": Object {
    "TestGreengrassResourceBucket": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "CorsConfiguration": Object {
          "CorsRules": Array [
            Object {
              "AllowedHeaders": Array [
                "*",
              ],
              "AllowedMethods": Array [
                "GET",
              ],
              "AllowedOrigins": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "TestUiCloudFrontToS3CloudFrontDistribution97F3087A",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "ExposedHeaders": Array [
                "ETag",
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "TestLoggingBucket": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "TestUiCloudFrontToS3CloudFrontDistribution97F3087A": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-CFR1",
              "reason": "The solution does not control geo restriction.",
            },
            Object {
              "id": "AwsSolutions-CFR2",
              "reason": "No need to enable WAF.",
            },
            Object {
              "id": "AwsSolutions-CFR4",
              "reason": "No contorl on the solution side as it is using the CloudFront default certificate.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W70",
              "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion",
            },
          ],
        },
      },
      "Properties": Object {
        "DistributionConfig": Object {
          "Comment": "Machine to Cloud Connectivity Framework Distribution",
          "CustomErrorResponses": Array [
            Object {
              "ErrorCode": 403,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
            Object {
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
          ],
          "DefaultCacheBehavior": Object {
            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
            "Compress": true,
            "TargetOriginId": "TestUiCloudFrontToS3CloudFrontDistributionOrigin1475474B4",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": Object {
            "Bucket": Object {
              "Fn::GetAtt": Array [
                "TestLoggingBucket",
                "RegionalDomainName",
              ],
            },
            "Prefix": "ui-cf/",
          },
          "Origins": Array [
            Object {
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "TestUiCloudFrontToS3S3Bucket43B44F2C",
                  "RegionalDomainName",
                ],
              },
              "Id": "TestUiCloudFrontToS3CloudFrontDistributionOrigin1475474B4",
              "S3OriginConfig": Object {
                "OriginAccessIdentity": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "origin-access-identity/cloudfront/",
                      Object {
                        "Ref": "TestUiCloudFrontToS3CloudFrontDistributionOrigin1S3Origin3379B80E",
                      },
                    ],
                  ],
                },
              },
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "TestUiCloudFrontToS3CloudFrontDistributionOrigin1S3Origin3379B80E": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-CFR1",
              "reason": "The solution does not control geo restriction.",
            },
            Object {
              "id": "AwsSolutions-CFR2",
              "reason": "No need to enable WAF.",
            },
            Object {
              "id": "AwsSolutions-CFR4",
              "reason": "No contorl on the solution side as it is using the CloudFront default certificate.",
            },
          ],
        },
      },
      "Properties": Object {
        "CloudFrontOriginAccessIdentityConfig": Object {
          "Comment": "Identity for TestUiCloudFrontToS3CloudFrontDistributionOrigin1475474B4",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "TestUiCloudFrontToS3S3Bucket43B44F2C": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-CFR1",
              "reason": "The solution does not control geo restriction.",
            },
            Object {
              "id": "AwsSolutions-CFR2",
              "reason": "No need to enable WAF.",
            },
            Object {
              "id": "AwsSolutions-CFR4",
              "reason": "No contorl on the solution side as it is using the CloudFront default certificate.",
            },
          ],
        },
      },
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "TestLoggingBucket",
          },
          "LogFilePrefix": "ui-s3/",
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "TestUiCloudFrontToS3S3BucketPolicy75585FD5": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-CFR1",
              "reason": "The solution does not control geo restriction.",
            },
            Object {
              "id": "AwsSolutions-CFR2",
              "reason": "No need to enable WAF.",
            },
            Object {
              "id": "AwsSolutions-CFR4",
              "reason": "No contorl on the solution side as it is using the CloudFront default certificate.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "F16",
              "reason": "Public website bucket policy requires a wildcard principal",
            },
          ],
        },
      },
      "Properties": Object {
        "Bucket": Object {
          "Ref": "TestUiCloudFrontToS3S3Bucket43B44F2C",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestUiCloudFrontToS3S3Bucket43B44F2C",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestUiCloudFrontToS3S3Bucket43B44F2C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "CanonicalUser": Object {
                  "Fn::GetAtt": Array [
                    "TestUiCloudFrontToS3CloudFrontDistributionOrigin1S3Origin3379B80E",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "TestUiCloudFrontToS3S3Bucket43B44F2C",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "TestUiIdentityPoolAuthenticatedRoleE51963FB": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "It does not allow wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": Object {
                "ForAnyValue:StringLike": Object {
                  "cognito-identity.amazonaws.com:amr": "authenticated",
                },
                "StringEquals": Object {
                  "cognito-identity.amazonaws.com:aud": Object {
                    "Ref": "TestUiIdentityPoolF602C72D",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              " Identity Pool authenticated role",
            ],
          ],
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "execute-api:Invoke",
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":execute-api:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":mock-id/prod/*",
                      ],
                    ],
                  },
                },
                Object {
                  "Action": "s3:GetObject",
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        Object {
                          "Fn::GetAtt": Array [
                            "TestGreengrassResourceBucket",
                            "Arn",
                          ],
                        },
                        "/public/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "ExecuteApiPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TestUiIdentityPoolF602C72D": Object {
      "Properties": Object {
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": Array [
          Object {
            "ClientId": Object {
              "Ref": "TestUiUserPoolClient21325B1C",
            },
            "ProviderName": Object {
              "Fn::GetAtt": Array [
                "TestUiUserPool04CDE8F0",
                "ProviderName",
              ],
            },
            "ServerSideTokenCheck": false,
          },
        ],
      },
      "Type": "AWS::Cognito::IdentityPool",
    },
    "TestUiIdentityPoolRoleAttachment72A6FD6E": Object {
      "Properties": Object {
        "IdentityPoolId": Object {
          "Ref": "TestUiIdentityPoolF602C72D",
        },
        "Roles": Object {
          "authenticated": Object {
            "Fn::GetAtt": Array [
              "TestUiIdentityPoolAuthenticatedRoleE51963FB",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
    },
    "TestUiUser09D84075": Object {
      "Properties": Object {
        "DesiredDeliveryMediums": Array [
          "EMAIL",
        ],
        "ForceAliasCreation": true,
        "UserAttributes": Array [
          Object {
            "Name": "email",
            "Value": "mockmail",
          },
          Object {
            "Name": "email_verified",
            "Value": "true",
          },
        ],
        "UserPoolId": Object {
          "Ref": "TestUiUserPool04CDE8F0",
        },
        "Username": "mockmail",
      },
      "Type": "AWS::Cognito::UserPoolUser",
    },
    "TestUiUserPool04CDE8F0": Object {
      "DeletionPolicy": "Delete",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-COG2",
              "reason": "No need to enable MFA as that is option for users.",
            },
          ],
        },
      },
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            Object {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": true,
          "InviteMessageTemplate": Object {
            "EmailMessage": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "
          <p>
            You are invited to join Machine to Cloud Connectivity Framework.<br />
            https://",
                  Object {
                    "Fn::GetAtt": Array [
                      "TestUiCloudFrontToS3CloudFrontDistribution97F3087A",
                      "DomainName",
                    ],
                  },
                  "
          </p>
          <p>
            Please sign in to Machine to Cloud Connectivity Framework using the temporary credentials below:<br />
            Username: <strong>{username}</strong><br />Password: <strong>{####}</strong>
          </p>
        ",
                ],
              ],
            },
            "EmailSubject": "[Machine to Cloud Connectivity Framework] Login information",
          },
        },
        "AutoVerifiedAttributes": Array [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "Policies": Object {
          "PasswordPolicy": Object {
            "MinimumLength": 12,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolAddOns": Object {
          "AdvancedSecurityMode": "ENFORCED",
        },
        "UserPoolName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-user-pool",
            ],
          ],
        },
        "UsernameAttributes": Array [
          "email",
        ],
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Delete",
    },
    "TestUiUserPoolClient21325B1C": Object {
      "Properties": Object {
        "AllowedOAuthFlows": Array [
          "implicit",
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": Array [
          "profile",
          "phone",
          "email",
          "openid",
          "aws.cognito.signin.user.admin",
        ],
        "CallbackURLs": Array [
          "https://example.com",
        ],
        "ClientName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-userpool-client",
            ],
          ],
        },
        "GenerateSecret": false,
        "PreventUserExistenceErrors": "ENABLED",
        "RefreshTokenValidity": 1440,
        "SupportedIdentityProviders": Array [
          "COGNITO",
        ],
        "TokenValidityUnits": Object {
          "RefreshToken": "minutes",
        },
        "UserPoolId": Object {
          "Ref": "TestUiUserPool04CDE8F0",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
  },
}
`;
